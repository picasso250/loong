
# o means output, ` means we will put a string after it
O `hello world!
O "\nhello world again\n" # same as above. and # means comment
#{
this is a multi-line comment
note there are no space between # and {
and new line must follow after { immediately
} # but we recommand that only use it in the begining of a file

    &a:num # define a variable
    I>a:num # I means input, > can be ommited, :num is type of a but can be ommited too
    O "square is ${a^^2}\n" # ${} inform the program to evaluate the expression

&a=1 # &means we define a variable (in current scope)
&b # if an variable is not init, it's zero valued
&fib(n) -> n<=1 ? n : fact(n-1)+fact(n-2) # and of course a lambda which bind to it's name fib
&say(str){ # and of course you can define a classic function
    O "${str}\n"
}
& ==>(elem,bound) = "${bound}$elem$bound" # you can define an operator, which is either unary or binary
# but you can not put () [] {} , _ in the customized operator
# oh, if there is only one variable name in ${}, then {} can be omiteed
# Note!, you can not use _ in a variable name

1+1 # do the caculation but do not output it
a=b+c # if a is not defined, trigger a error
f("hello") # call a function

&a=1/3 # rational number 1/3
&a=3.0 # rational number 3/1
&a:int=4
&a:num=5 # rational number 5/1
&a:float=3.0 # a is float

&s:str=`{
    here doc here and trimed the tab(s) started if the first line start with tab(s)
    no tab is also accepted
    you can not evaluate things here
}

array and slice (copied from go)
&a[3] # it's an array whose length is 3
len(a) # the compiler will sub it with 3
&a=[1,2,3] # it's an slice of course
&a=[1 2 3 x y z] # if all the elems are literal or variable
&a:[]int # of course it's type
b=a[0] # read elem
b=a[0:1] # slice a new one

    &m:int:int=[a:b,c:d,] # : means a pair, and comma(,) can after the last elem
    &m=[
        a:b
    ] # you can break it to lines, and comma(,) must be ommited

hf(a->a^^2) # -> means lambda
hf(_^^2) # _ is default variable name.
hf(^^2) # if _ is the start of lambda body, and followed by a binaray operator, _ can be emmited

"abc"~ /abc/i # ~ means match, and return a bool
&m="abc"~~/a(b+)c/i # m is a capture object
m[0] # abc
m[1] # b
m["named"] # if m is named, this is also valid
 
|student{ # | like c's struct
age:int
name:str
_id:str # _ means private
}
&a=student{18,"wang"}
&a=student{name:"will be born"} # age is 0
# must in the same file with student
&(s:student)say(){ # struct can have methods, and s is the receiver
    O`my name is $.name and my id is $s.id # s can be ommited and private id may not add _, IDE should color it differently
}

?a>0{ # this is if statement! you can put all type here, not only bool, zero value is false, true otherwise
    O`a is positive
: # this is else!
    O`a is negtive or zero
}
&reLU= ~a{ # we started to match a, ~ is the buildin operator: match
    <0:0 # <0 is a lambda, so we test it with a (the lambda must return bool)
    /ab+/i:"ab" # if a is a string, we can match it with a regex, and _ is match object
    [head\tail]:tail+=head # can match slice, and += is slice append operator
    _:a # _ means otherwise
}
# literal can be patter matched too
# and function can be defined with it
# every thing we can match can put in function define's ()
&fib(0)=0
|fib(1)=1
|fib(n)=fib(n-1)+fib(n-2)

~ok{ # while loop
    O`I am ok
}^ # note the ^ here
@{
}~cond # do while loop
@n{} # loop n times, of course _ is current variable
@n->i{} #named
@{} # infinte loop
@{
    @; # break
    @> # continue
}
@slice->i,v{} # loop on a slice or map
@map->k,v{} # loop on a slice or map

|<- math/rand # import a package and the namespace will be polluted

&GlobalVar=42
&randSeed:int # file scope

&reLU= ~a{
    >=0:_ # test _ with x->x>=0, so _ is the pair scope
    _:a # a is match operator scope, _:_ is also valid, but the second _ is a variable name
}

&a:int
&b:str
b=a # compile error

f()
!msg,stack{ # if f is error, process it here
    O`error: $msg, and last stack is ${stack[-1]}
}
f(g()) # oh, g()'s error will surely be ignored

|\f()->co # create a coroutine named co
&f(){
    @{
        |- _ # yield i
    }
}
@9{
    O`${co->}  # resume and get next value, co->i put the value into i
    !{@;} # if co return false, then break the loop
}
